// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonalityTest.Data;

namespace PersonalityTest.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PersonalityTest.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("Dob");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("lastName");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PersonalityTest.Models.SectionA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AspNetUsersId");

                    b.Property<int>("Coordinator1");

                    b.Property<int>("Finisher1");

                    b.Property<int>("Implementer1");

                    b.Property<int>("Monitor1");

                    b.Property<int>("Planter1");

                    b.Property<int>("Resource1");

                    b.Property<int>("Shaper1");

                    b.Property<int>("Teamwork1");

                    b.Property<int?>("sectionFsId");

                    b.Property<int?>("sectionGsId");

                    b.Property<int?>("sectionHId");

                    b.HasKey("Id");

                    b.HasIndex("sectionFsId");

                    b.HasIndex("sectionGsId");

                    b.HasIndex("sectionHId");

                    b.ToTable("sectionAs");
                });

            modelBuilder.Entity("PersonalityTest.Models.SectionB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AspNetUsersId");

                    b.Property<int>("Coordinator2");

                    b.Property<int>("Finisher2");

                    b.Property<int>("Implementer2");

                    b.Property<int>("Monitor2");

                    b.Property<int>("Planter2");

                    b.Property<int>("Resource2");

                    b.Property<int>("Shaper2");

                    b.Property<int>("Teamwork2");

                    b.Property<int?>("sectionAId");

                    b.Property<int?>("sectionCId");

                    b.Property<int?>("sectionDId");

                    b.Property<int?>("sectionEId");

                    b.Property<int?>("sectionFId");

                    b.Property<int?>("sectionGId");

                    b.Property<int?>("sectionHId");

                    b.HasKey("Id");

                    b.HasIndex("sectionAId");

                    b.HasIndex("sectionCId");

                    b.HasIndex("sectionDId");

                    b.HasIndex("sectionEId");

                    b.HasIndex("sectionFId");

                    b.HasIndex("sectionGId");

                    b.HasIndex("sectionHId");

                    b.ToTable("sectionBs");
                });

            modelBuilder.Entity("PersonalityTest.Models.SectionC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AspNetUsersId");

                    b.Property<int>("Coordinator3");

                    b.Property<int>("Finisher3");

                    b.Property<int>("Implementer3");

                    b.Property<int>("Monitor3");

                    b.Property<int>("Planter3");

                    b.Property<int>("Resource3");

                    b.Property<int>("Shaper3");

                    b.Property<int>("Teamwork3");

                    b.Property<int?>("sectionAId");

                    b.Property<int?>("sectionDId");

                    b.Property<int?>("sectionEsId");

                    b.Property<int?>("sectionGId");

                    b.Property<int?>("sectionHsId");

                    b.HasKey("Id");

                    b.HasIndex("sectionAId");

                    b.HasIndex("sectionDId");

                    b.HasIndex("sectionEsId");

                    b.HasIndex("sectionGId");

                    b.HasIndex("sectionHsId");

                    b.ToTable("sectionCs");
                });

            modelBuilder.Entity("PersonalityTest.Models.SectionD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AspNetUsersId");

                    b.Property<int>("Coordinator4");

                    b.Property<int>("Finisher4");

                    b.Property<int>("Implementer4");

                    b.Property<int>("Monitor4");

                    b.Property<int>("Planter4");

                    b.Property<int>("Resource4");

                    b.Property<int?>("SectionDId");

                    b.Property<int>("Shaper4");

                    b.Property<int>("Teamwork4");

                    b.Property<int?>("sectionAId");

                    b.Property<int?>("sectionGId");

                    b.HasKey("Id");

                    b.HasIndex("SectionDId");

                    b.HasIndex("sectionAId");

                    b.HasIndex("sectionGId");

                    b.ToTable("sectionDs");
                });

            modelBuilder.Entity("PersonalityTest.Models.SectionE", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AspNetUsersId");

                    b.Property<int>("Coordinator5");

                    b.Property<int>("Finisher5");

                    b.Property<int>("Implementer5");

                    b.Property<int>("Monitor5");

                    b.Property<int>("Planter5");

                    b.Property<int>("Resource5");

                    b.Property<int>("Shaper5");

                    b.Property<int>("Teamwork5");

                    b.Property<int?>("sectionAId");

                    b.Property<int?>("sectionDId");

                    b.Property<int?>("sectionGId");

                    b.HasKey("Id");

                    b.HasIndex("sectionAId");

                    b.HasIndex("sectionDId");

                    b.HasIndex("sectionGId");

                    b.ToTable("sectionEs");
                });

            modelBuilder.Entity("PersonalityTest.Models.SectionF", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AspNetUsersId");

                    b.Property<int>("Coordinator6");

                    b.Property<int>("Finisher6");

                    b.Property<int>("Implementer6");

                    b.Property<int>("Monitor6");

                    b.Property<int>("Planter6");

                    b.Property<int>("Resource6");

                    b.Property<int>("Shaper6");

                    b.Property<int>("Teamwork6");

                    b.Property<int?>("sectionCsId");

                    b.Property<int?>("sectionDId");

                    b.Property<int?>("sectionEsId");

                    b.Property<int?>("sectionGId");

                    b.HasKey("Id");

                    b.HasIndex("sectionCsId");

                    b.HasIndex("sectionDId");

                    b.HasIndex("sectionEsId");

                    b.HasIndex("sectionGId");

                    b.ToTable("sectionFs");
                });

            modelBuilder.Entity("PersonalityTest.Models.SectionG", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AspNetUsersId");

                    b.Property<int>("Coordinator7");

                    b.Property<int>("Finisher7");

                    b.Property<int>("Implementer7");

                    b.Property<int>("Monitor7");

                    b.Property<int>("Planter7");

                    b.Property<int>("Resource7");

                    b.Property<int>("Shaper7");

                    b.Property<int>("Teamwork7");

                    b.HasKey("Id");

                    b.ToTable("sectionGs");
                });

            modelBuilder.Entity("PersonalityTest.Models.SectionH", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Coordinator8");

                    b.Property<int>("Finisher8");

                    b.Property<int>("Implementer8");

                    b.Property<int>("Monitor8");

                    b.Property<int>("Planter8");

                    b.Property<int>("Resource8");

                    b.Property<int>("Shaper8");

                    b.Property<int>("Teamwork8");

                    b.Property<int?>("sectionDId");

                    b.Property<int?>("sectionEsId");

                    b.Property<int?>("sectionFsId");

                    b.Property<int?>("sectionGId");

                    b.HasKey("Id");

                    b.HasIndex("sectionDId");

                    b.HasIndex("sectionEsId");

                    b.HasIndex("sectionFsId");

                    b.HasIndex("sectionGId");

                    b.ToTable("SectionH");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PersonalityTest.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PersonalityTest.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PersonalityTest.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PersonalityTest.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PersonalityTest.Models.SectionA", b =>
                {
                    b.HasOne("PersonalityTest.Models.SectionF", "sectionFs")
                        .WithMany("sectionA")
                        .HasForeignKey("sectionFsId");

                    b.HasOne("PersonalityTest.Models.SectionG", "sectionGs")
                        .WithMany("sectionA")
                        .HasForeignKey("sectionGsId");

                    b.HasOne("PersonalityTest.Models.SectionH", "sectionH")
                        .WithMany("sectionA")
                        .HasForeignKey("sectionHId");
                });

            modelBuilder.Entity("PersonalityTest.Models.SectionB", b =>
                {
                    b.HasOne("PersonalityTest.Models.SectionA", "sectionA")
                        .WithMany("SectionBs")
                        .HasForeignKey("sectionAId");

                    b.HasOne("PersonalityTest.Models.SectionC", "sectionC")
                        .WithMany("sectionBs")
                        .HasForeignKey("sectionCId");

                    b.HasOne("PersonalityTest.Models.SectionD", "sectionD")
                        .WithMany("sectionBs")
                        .HasForeignKey("sectionDId");

                    b.HasOne("PersonalityTest.Models.SectionE", "sectionE")
                        .WithMany("sectionBs")
                        .HasForeignKey("sectionEId");

                    b.HasOne("PersonalityTest.Models.SectionF", "sectionF")
                        .WithMany("sectionBs")
                        .HasForeignKey("sectionFId");

                    b.HasOne("PersonalityTest.Models.SectionG", "sectionG")
                        .WithMany("sectionBs")
                        .HasForeignKey("sectionGId");

                    b.HasOne("PersonalityTest.Models.SectionH", "sectionH")
                        .WithMany("sectionBs")
                        .HasForeignKey("sectionHId");
                });

            modelBuilder.Entity("PersonalityTest.Models.SectionC", b =>
                {
                    b.HasOne("PersonalityTest.Models.SectionA", "sectionA")
                        .WithMany("SectionCs")
                        .HasForeignKey("sectionAId");

                    b.HasOne("PersonalityTest.Models.SectionD", "sectionD")
                        .WithMany()
                        .HasForeignKey("sectionDId");

                    b.HasOne("PersonalityTest.Models.SectionE", "sectionEs")
                        .WithMany("sectionCs")
                        .HasForeignKey("sectionEsId");

                    b.HasOne("PersonalityTest.Models.SectionG", "sectionG")
                        .WithMany("sectionc")
                        .HasForeignKey("sectionGId");

                    b.HasOne("PersonalityTest.Models.SectionH", "sectionHs")
                        .WithMany("sectionCs")
                        .HasForeignKey("sectionHsId");
                });

            modelBuilder.Entity("PersonalityTest.Models.SectionD", b =>
                {
                    b.HasOne("PersonalityTest.Models.SectionD")
                        .WithMany("sectionD")
                        .HasForeignKey("SectionDId");

                    b.HasOne("PersonalityTest.Models.SectionA", "sectionA")
                        .WithMany("sectionDs")
                        .HasForeignKey("sectionAId");

                    b.HasOne("PersonalityTest.Models.SectionG", "sectionG")
                        .WithMany("sectionD")
                        .HasForeignKey("sectionGId");
                });

            modelBuilder.Entity("PersonalityTest.Models.SectionE", b =>
                {
                    b.HasOne("PersonalityTest.Models.SectionA", "sectionA")
                        .WithMany("sectionEs")
                        .HasForeignKey("sectionAId");

                    b.HasOne("PersonalityTest.Models.SectionD", "sectionD")
                        .WithMany("sectionEs")
                        .HasForeignKey("sectionDId");

                    b.HasOne("PersonalityTest.Models.SectionG", "sectionG")
                        .WithMany("sectionEs")
                        .HasForeignKey("sectionGId");
                });

            modelBuilder.Entity("PersonalityTest.Models.SectionF", b =>
                {
                    b.HasOne("PersonalityTest.Models.SectionC", "sectionCs")
                        .WithMany("sectionFs")
                        .HasForeignKey("sectionCsId");

                    b.HasOne("PersonalityTest.Models.SectionD", "sectionD")
                        .WithMany("sectionFs")
                        .HasForeignKey("sectionDId");

                    b.HasOne("PersonalityTest.Models.SectionE", "sectionEs")
                        .WithMany("sectionFs")
                        .HasForeignKey("sectionEsId");

                    b.HasOne("PersonalityTest.Models.SectionG", "sectionG")
                        .WithMany("sectionFs")
                        .HasForeignKey("sectionGId");
                });

            modelBuilder.Entity("PersonalityTest.Models.SectionH", b =>
                {
                    b.HasOne("PersonalityTest.Models.SectionD", "sectionD")
                        .WithMany("sectionHs")
                        .HasForeignKey("sectionDId");

                    b.HasOne("PersonalityTest.Models.SectionE", "sectionEs")
                        .WithMany("sectionHs")
                        .HasForeignKey("sectionEsId");

                    b.HasOne("PersonalityTest.Models.SectionF", "sectionFs")
                        .WithMany("sectionHs")
                        .HasForeignKey("sectionFsId");

                    b.HasOne("PersonalityTest.Models.SectionG", "sectionG")
                        .WithMany("sectionHs")
                        .HasForeignKey("sectionGId");
                });
#pragma warning restore 612, 618
        }
    }
}
