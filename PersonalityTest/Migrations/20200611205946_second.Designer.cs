// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonalityTest.Data;

namespace PersonalityTest.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200611205946_second")]
    partial class second
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PersonalityTest.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("Dob");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("lastName");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PersonalityTest.Models.Coordinator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Coordinator1");

                    b.Property<int>("Coordinator2");

                    b.Property<int>("Coordinator3");

                    b.Property<int>("Coordinator4");

                    b.Property<int>("Coordinator5");

                    b.Property<int>("Coordinator6");

                    b.Property<int>("Coordinator7");

                    b.Property<int?>("FinisherId");

                    b.Property<int?>("PlanterId");

                    b.Property<int?>("ResourceId");

                    b.Property<int?>("ShaperId");

                    b.Property<int?>("TeamworkId");

                    b.Property<int?>("implementerId");

                    b.HasKey("Id");

                    b.HasIndex("FinisherId");

                    b.HasIndex("PlanterId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("ShaperId");

                    b.HasIndex("TeamworkId");

                    b.HasIndex("implementerId");

                    b.ToTable("coordinators");
                });

            modelBuilder.Entity("PersonalityTest.Models.Finisher", b =>
                {
                    b.Property<int>("FinisherId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Finisher1");

                    b.Property<int>("Finisher2");

                    b.Property<int>("Finisher3");

                    b.Property<int>("Finisher4");

                    b.Property<int>("Finisher5");

                    b.Property<int>("Finisher6");

                    b.Property<int>("Finisher7");

                    b.Property<int?>("PlanterId");

                    b.Property<int?>("ResourceId");

                    b.Property<int?>("ShaperId");

                    b.Property<int?>("TeamworkId");

                    b.Property<int?>("implementerId");

                    b.HasKey("FinisherId");

                    b.HasIndex("PlanterId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("ShaperId");

                    b.HasIndex("TeamworkId");

                    b.HasIndex("implementerId");

                    b.ToTable("finishers");
                });

            modelBuilder.Entity("PersonalityTest.Models.Implementer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Implementer1");

                    b.Property<int>("Implementer2");

                    b.Property<int>("Implementer3");

                    b.Property<int>("Implementer4");

                    b.Property<int>("Implementer5");

                    b.Property<int>("Implementer6");

                    b.Property<int>("Implementer7");

                    b.Property<int?>("PlanterId");

                    b.Property<int?>("ResourceId");

                    b.Property<int?>("ShaperId");

                    b.Property<int?>("TeamworkId");

                    b.HasKey("Id");

                    b.HasIndex("PlanterId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("ShaperId");

                    b.HasIndex("TeamworkId");

                    b.ToTable("implementers");
                });

            modelBuilder.Entity("PersonalityTest.Models.Planter", b =>
                {
                    b.Property<int>("PlanterId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Planter1");

                    b.Property<int>("Planter2");

                    b.Property<int>("Planter3");

                    b.Property<int>("Planter4");

                    b.Property<int>("Planter5");

                    b.Property<int>("Planter6");

                    b.Property<int>("Planter7");

                    b.Property<int?>("ResourceId");

                    b.Property<int?>("ShaperId");

                    b.Property<int?>("TeamworkId");

                    b.HasKey("PlanterId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("ShaperId");

                    b.HasIndex("TeamworkId");

                    b.ToTable("planters");
                });

            modelBuilder.Entity("PersonalityTest.Models.Resource", b =>
                {
                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Resource1");

                    b.Property<int>("Resource2");

                    b.Property<int>("Resource3");

                    b.Property<int>("Resource4");

                    b.Property<int>("Resource5");

                    b.Property<int>("Resource6");

                    b.Property<int>("Resource7");

                    b.Property<int?>("ShaperId");

                    b.Property<int?>("TeamworkId");

                    b.HasKey("ResourceId");

                    b.HasIndex("ShaperId");

                    b.HasIndex("TeamworkId");

                    b.ToTable("resources");
                });

            modelBuilder.Entity("PersonalityTest.Models.Shaper", b =>
                {
                    b.Property<int>("ShaperId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Shaper1");

                    b.Property<int>("Shaper2");

                    b.Property<int>("Shaper3");

                    b.Property<int>("Shaper4");

                    b.Property<int>("Shaper5");

                    b.Property<int>("Shaper6");

                    b.Property<int>("Shaper7");

                    b.Property<int?>("TeamworkId");

                    b.HasKey("ShaperId");

                    b.HasIndex("TeamworkId");

                    b.ToTable("shapers");
                });

            modelBuilder.Entity("PersonalityTest.Models.TeamWork", b =>
                {
                    b.Property<int>("TeamworkId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TeamWork1");

                    b.Property<int>("TeamWork2");

                    b.Property<int>("TeamWork3");

                    b.Property<int>("TeamWork4");

                    b.Property<int>("TeamWork5");

                    b.Property<int>("TeamWork6");

                    b.Property<int>("TeamWork7");

                    b.HasKey("TeamworkId");

                    b.ToTable("teamWorks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PersonalityTest.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PersonalityTest.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PersonalityTest.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PersonalityTest.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PersonalityTest.Models.Coordinator", b =>
                {
                    b.HasOne("PersonalityTest.Models.Finisher", "finisher")
                        .WithMany("coordinator")
                        .HasForeignKey("FinisherId");

                    b.HasOne("PersonalityTest.Models.Planter", "planter")
                        .WithMany("coordinators")
                        .HasForeignKey("PlanterId");

                    b.HasOne("PersonalityTest.Models.Resource", "resource")
                        .WithMany("coordinators")
                        .HasForeignKey("ResourceId");

                    b.HasOne("PersonalityTest.Models.Shaper", "shaper")
                        .WithMany("coordinators")
                        .HasForeignKey("ShaperId");

                    b.HasOne("PersonalityTest.Models.TeamWork", "teamWork")
                        .WithMany("coordinators")
                        .HasForeignKey("TeamworkId");

                    b.HasOne("PersonalityTest.Models.Implementer", "implementer")
                        .WithMany("coordinators")
                        .HasForeignKey("implementerId");
                });

            modelBuilder.Entity("PersonalityTest.Models.Finisher", b =>
                {
                    b.HasOne("PersonalityTest.Models.Planter", "planter")
                        .WithMany("finisher")
                        .HasForeignKey("PlanterId");

                    b.HasOne("PersonalityTest.Models.Resource", "resource")
                        .WithMany("finisher")
                        .HasForeignKey("ResourceId");

                    b.HasOne("PersonalityTest.Models.Shaper", "shaper")
                        .WithMany("finisher")
                        .HasForeignKey("ShaperId");

                    b.HasOne("PersonalityTest.Models.TeamWork", "teamWork")
                        .WithMany("finisher")
                        .HasForeignKey("TeamworkId");

                    b.HasOne("PersonalityTest.Models.Implementer", "implementer")
                        .WithMany("finisher")
                        .HasForeignKey("implementerId");
                });

            modelBuilder.Entity("PersonalityTest.Models.Implementer", b =>
                {
                    b.HasOne("PersonalityTest.Models.Planter", "planter")
                        .WithMany("implementers")
                        .HasForeignKey("PlanterId");

                    b.HasOne("PersonalityTest.Models.Resource", "resource")
                        .WithMany("implementers")
                        .HasForeignKey("ResourceId");

                    b.HasOne("PersonalityTest.Models.Shaper", "shaper")
                        .WithMany("implementers")
                        .HasForeignKey("ShaperId");

                    b.HasOne("PersonalityTest.Models.TeamWork", "teamWork")
                        .WithMany("implementers")
                        .HasForeignKey("TeamworkId");
                });

            modelBuilder.Entity("PersonalityTest.Models.Planter", b =>
                {
                    b.HasOne("PersonalityTest.Models.Resource", "resource")
                        .WithMany("planter")
                        .HasForeignKey("ResourceId");

                    b.HasOne("PersonalityTest.Models.Shaper", "shaper")
                        .WithMany("planter")
                        .HasForeignKey("ShaperId");

                    b.HasOne("PersonalityTest.Models.TeamWork", "teamWork")
                        .WithMany("planter")
                        .HasForeignKey("TeamworkId");
                });

            modelBuilder.Entity("PersonalityTest.Models.Resource", b =>
                {
                    b.HasOne("PersonalityTest.Models.Shaper", "shaper")
                        .WithMany("resource")
                        .HasForeignKey("ShaperId");

                    b.HasOne("PersonalityTest.Models.TeamWork", "teamWork")
                        .WithMany("resource")
                        .HasForeignKey("TeamworkId");
                });

            modelBuilder.Entity("PersonalityTest.Models.Shaper", b =>
                {
                    b.HasOne("PersonalityTest.Models.TeamWork", "teamWork")
                        .WithMany("shaper")
                        .HasForeignKey("TeamworkId");
                });
#pragma warning restore 612, 618
        }
    }
}
